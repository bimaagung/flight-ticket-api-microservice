import { ConfigurableModuleAsyncOptions, Provider, Type } from '@nestjs/common';
import { CacheManagerOptions } from './cache-manager.interface';
export type CacheModuleOptions<StoreConfig extends Record<any, any> = Record<string, any>> = CacheManagerOptions & StoreConfig & {
    isGlobal?: boolean;
};
export interface CacheOptionsFactory<StoreConfig extends Record<any, any> = Record<string, any>> {
    createCacheOptions(): Promise<CacheModuleOptions<StoreConfig>> | CacheModuleOptions<StoreConfig>;
}
export interface CacheModuleAsyncOptions<StoreConfig extends Record<any, any> = Record<string, any>> extends ConfigurableModuleAsyncOptions<CacheModuleOptions<StoreConfig>, keyof CacheOptionsFactory> {
    useExisting?: Type<CacheOptionsFactory<StoreConfig>>;
    useClass?: Type<CacheOptionsFactory<StoreConfig>>;
    useFactory?: (...args: any[]) => Promise<CacheModuleOptions<StoreConfig>> | CacheModuleOptions<StoreConfig>;
    inject?: any[];
    extraProviders?: Provider[];
    isGlobal?: boolean;
}
