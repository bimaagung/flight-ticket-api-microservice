export interface LiteralObject {
    [key: string]: any;
}
export interface CacheStore {
    set<T>(key: string, value: T, options?: CacheStoreSetOptions<T> | number): Promise<void> | void;
    get<T>(key: string): Promise<T | undefined> | T | undefined;
    del?(key: string): void | Promise<void>;
}
export interface CacheStoreSetOptions<T> {
    ttl?: ((value: T) => number) | number;
}
export type CacheStoreFactory = {
    create(args: LiteralObject): CacheStore;
} | ((args: LiteralObject) => CacheStore | Promise<CacheStore>);
export interface CacheManagerOptions {
    store?: string | CacheStoreFactory | CacheStore;
    ttl?: number;
    max?: number;
    isCacheableValue?: (value: any) => boolean;
}
