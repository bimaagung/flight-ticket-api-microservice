version: '3'

services:

  # track-service:
  #   build:
  #     context: ./../track-service
  #     dockerfile: ./../track-service/track-service.dockerfile
  #   restart: always
  #   ports:
  #     - "3000:3000"
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #   depends_on:
  #     postgres-track:
  #       condition: service_healthy
  #   env_file:
  #     - ./../track-service/.env

  # airplane-service:
  #   build:
  #     context: ./../airplane-service
  #     dockerfile: ./../airplane-service/airplane-service.dockerfile
  #   restart: always
  #   ports:
  #     - "3001:3001"
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #   depends_on:
  #     mysql:
  #       condition: service_healthy
  #   env_file:
  #     - ./../airplane-service/.env
      
  # ticket-service:
  #   build:
  #     context: ./../ticket-service
  #     dockerfile: ./../ticket-service/ticket-service.dockerfile
  #   restart: always
  #   ports:
  #     - "3002:3002"
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #   depends_on:
  #     postgres-ticket:
  #       condition: service_healthy
  #   env_file:
  #     - ./../ticket-service/.env
  
  # postgres-track:
  #   image: 'postgres:14.2'
  #   restart: always
  #   ports:
  #     - "5431:5432"
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: secret
  #     POSTGRES_DB: flight_ticket
  #   healthcheck:
  #     test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
  #     interval: 10s
  #     timeout: 3s
  #     retries: 3
  #   volumes:
  #     - ./db-data/postgres-track/:/var/lib/postgresql-track/data/

  # postgres-ticket:
  #   image: 'postgres:14.2'
  #   restart: always
  #   ports:
  #     - "5433:5432"
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: secret
  #     POSTGRES_DB: ticket
  #   healthcheck:
  #     test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
  #     interval: 10s
  #     timeout: 3s
  #     retries: 3
  #   volumes:
  #     - ./db-data/postgres-ticket/:/var/lib/postgresql-ticket/data/
  
  # rabbitmq:
  #   image: 'rabbitmq:3.9-management'
  #   restart: always
  #   ports:
  #     - "15673:15672"
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #   volumes:
  #     - ./db-data/rabbitmq/:/var/lib/rabbitmq/

  # mysql:
  #   image: mysql
  #   ports:
  #     - "3306:3306"
  #   command: --default-authentication-plugin=mysql_native_password
  #   restart: always
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #   environment:
  #     MYSQL_ROOT_PASSWORD: secret
  #     MYSQL_DATABASE: airplane
  #   volumes:
  #     - ./db-data/mysql/:/var/lib/mysql/
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
  #     timeout: 5s
  #     retries: 10
  
  # migrate-track:
  #     image: migrate/migrate
  #     volumes:
  #         - ./../track-service/database/migrations:/database/migrations
  #     command: ["-path", "/database/migrations", "-database",  "postgres://postgres:secret@postgres-track:5432/flight_ticket?sslmode=disable", "up"]
  #     depends_on:
  #       postgres-track:
  #         condition: service_healthy
  #     links: 
  #         - postgres-track

  # migrate-ticket:
  #     image: migrate/migrate
  #     volumes:
  #         - ./../ticket-service/database/migrations:/database/migrations
  #     command: ["-path", "/database/migrations", "-database",  "postgres://postgres:secret@postgres-ticket:5432/ticket?sslmode=disable", "up"]
  #     depends_on:
  #       postgres-ticket:
  #         condition: service_healthy
  #     links: 
  #         - postgres-ticket

  # migrate-airplane:
  #     image: migrate/migrate
  #     volumes:
  #         - ./../airplane-service/database/migrations:/database/migrations
  #     command: ["-path", "/database/migrations", "-database",  "mysql://root:secret@tcp(mysql:3306)/airplane?multiStatements=true&tls=false", "up"]
  #     depends_on:
  #       mysql:
  #         condition: service_healthy
  #     links: 
  #         - mysql

  elasticsearch-ticket:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.2
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
    - bootstrap.memory_lock=true
    - cluster.name=ticket-cluster
    - node.name=node-1
    - cluster.routing.allocation.disk.threshold_enabled=false
    - discovery.type=single-node
    - xpack.security.enabled=false
    - xpack.security.http.ssl.enabled=false
    - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
    ulimits:
      memlock:
        hard: -1
        soft: -1
    volumes:
    - ./db-data/esdata-ticket:/usr/share/elasticsearch/data
    ports:
    - 9200:9200
    healthcheck:
      interval: 20s
      retries: 10
      test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'
  
  redis-authentication:
    image: redis
    #command: /bin/sh -c "redis-server --requirepass secret"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    volumes:
    - ./db-data/redis-authentication:/usr/share/redis-authentication/data
    ports:
    - 6379:6379
    healthcheck:
      interval: 20s
      retries: 10
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

  